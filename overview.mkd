Overview
========

Things I've learned in software development that I wish I knew when I was in ops

Preamble
--------

Operations in current times

  * Less about manually configuring things
  * More about building tooling to configure things
    * Humans don't scale well
    * Automate everything


Operations is all about change

  * Creating change
  * Preventing change
  * Operations exists in a state of perpetual flux

So how do we manage this?

VCS and CI
----------

We need a way to experiment, try things out, roll back errors, and the faster we
can do this the faster we can work.

Testing
-------

We need a way to validate changes. More than just trying things out by hand, we
need a way to automatically confirm that things work.

Using test frameworks lets us specify the behavior we want, and instantly
validate it.

Tests can also act as a contract. They're a codification of what you care about
and help clear up expectations between outside parties.

Thinking
--------

Everybody likes creating technical solutions to problems. You get to write
greenfield code, solve a problem your way, and it makes for a great
presentation.

However, it's folly to try to implement technical solutions to social problems.
You can add layer after layer of code, but you're just patching up the symptoms
rather

Some of the most important things I've learned are not technical solutions, but
cognitive solutions. A lot of them come down to discipline that's drilled into
you in software development.

  * Solve simpler problems
    * Determine minimal reproducible case
    * Make one change at a time
    * YAGNI
